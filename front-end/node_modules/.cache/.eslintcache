[{"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\index.js":"1","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\App.js":"3","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\routes\\Login.js":"4","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\routes\\Edit.js":"5","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\routes\\View.js":"6","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\LoginPage.js":"7","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\containers\\ViewPageContainer.js":"8","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\containers\\EditPageContainer.js":"9","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\ViewButtons.js":"10","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\ViewTable.js":"11","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\EditTable.js":"12","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\EditButtons.js":"13"},{"size":586,"mtime":1655696772854,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1655696772857,"results":"16","hashOfConfig":"15"},{"size":757,"mtime":1655696772840,"results":"17","hashOfConfig":"15"},{"size":196,"mtime":1655696772861,"results":"18","hashOfConfig":"15"},{"size":147,"mtime":1655696772860,"results":"19","hashOfConfig":"15"},{"size":149,"mtime":1655696772863,"results":"20","hashOfConfig":"15"},{"size":2453,"mtime":1655696772846,"results":"21","hashOfConfig":"15"},{"size":3891,"mtime":1656249119543,"results":"22","hashOfConfig":"15"},{"size":10447,"mtime":1656258402775,"results":"23","hashOfConfig":"15"},{"size":16713,"mtime":1655696772847,"results":"24","hashOfConfig":"15"},{"size":13381,"mtime":1656259541116,"results":"25","hashOfConfig":"15"},{"size":29281,"mtime":1656259511131,"results":"26","hashOfConfig":"15"},{"size":10981,"mtime":1656257639220,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9gec8i",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\index.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\reportWebVitals.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\App.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\routes\\Login.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\routes\\Edit.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\routes\\View.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\LoginPage.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\containers\\ViewPageContainer.js",["69","70"],[],"import { useState, useEffect } from \"react\";\r\nimport ViewButtons from \"../components/ViewButtons\";\r\nimport ViewTable from \"../components/ViewTable\";\r\nconst ViewContainer = () => {\r\n    const [startTime, setStartTime] = useState({ startYear: \"\", startMonth: \"\", startDay: \"\" });\r\n    const [endTime, setEndTime] = useState({ endYear: \"\", endMonth: \"\", endDay: \"\" });\r\n    const [timeRange, setTimeRange] = useState([]);\r\n    const [viewMode, setViewMode] = useState(\"normal\");\r\n    const [chosenType, setChosenType] = useState(-1);\r\n\r\n    const initialDatas = [\r\n        {\r\n            eventName: \"Apple\",\r\n            typeId: 1,\r\n            yearMonthDay: \"20200530\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 0,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            eventName: \"Banana\",\r\n            typeId: 2,\r\n            yearMonthDay: \"20210601\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 1,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            eventName: \"Candy\",\r\n            typeId: 3,\r\n            yearMonthDay: \"20220405\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 2,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            eventName: \"Dance\",\r\n            typeId: 4,\r\n            yearMonthDay: \"20220220\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 3,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        }\r\n    ];\r\n    const [datas, setDatas] = useState([]);\r\n    const [chosenData, setChosenData] = useState({});\r\n    const [cost, setCost] = useState(null);\r\n    const [keywordDatas, setKeywordDatas] = useState([]);\r\n\r\n    const convertKeyName = (json) => {\r\n        json.forEach(data => {\r\n            for (let oldKey in data) {\r\n                let temp;\r\n                temp = oldKey.split(\"_\");\r\n                let newKey = temp[0].toLocaleLowerCase();\r\n                temp.forEach((word, index) => {\r\n                    if (index > 0) {\r\n                        word = word[0].toUpperCase() + word.slice(1);\r\n                        newKey += word;\r\n                    }\r\n                });\r\n                data[newKey] = data[oldKey];\r\n            }\r\n        })\r\n    }\r\n\r\n    const fetchDatas = async () => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/view\");\r\n            const json = await data.json();\r\n            convertKeyName(json.data);\r\n            setDatas(json.data);\r\n        }\r\n        catch (err) {\r\n            console.log(\"err in fetching datas\", err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDatas();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <ViewButtons startTime={startTime} setStartTime={setStartTime} endTime={endTime} setEndTime={setEndTime} setViewMode={setViewMode} setTimeRange={setTimeRange} datas={datas} chosenType={chosenType} setChosenType={setChosenType} cost={cost} setCost={setCost} setKeywordDatas={setKeywordDatas} />\r\n            <ViewTable datas={datas} setDatas={setDatas} startTime={startTime} endTime={endTime} viewMode={viewMode} timeRange={timeRange} chosenData={chosenData} setChosenData={setChosenData} chosenType={chosenType} keywordDatas={keywordDatas} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewContainer;","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\containers\\EditPageContainer.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92"],[],"import { useState, useEffect } from \"react\";\r\nimport EditButtons from \"../components/EditButtons\";\r\nimport EditTable from \"../components/EditTable\";\r\n\r\nconst EditPageContainer = () => {\r\n    const initialDatas = [\r\n        {\r\n            eventName: \"Apple\",\r\n            typeId: 1,\r\n            yearMonthDay: \"20200530\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 0,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            eventName: \"Banana\",\r\n            typeId: 2,\r\n            yearMonthDay: \"20210601\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 1,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            eventName: \"Candy\",\r\n            typeId: 3,\r\n            yearMonthDay: \"20220405\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 2,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            eventName: \"Dance\",\r\n            typeId: 4,\r\n            yearMonthDay: \"20220220\",\r\n            startTime: \"\",\r\n            endTime: \"\",\r\n            locationId: 3,\r\n            cost: 50,\r\n            mood: \"Happy\",\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        }\r\n    ];\r\n    const initialLocations = [\r\n        {\r\n            locationId: 0,\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            locationId: 1,\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            locationId: 2,\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        },\r\n        {\r\n            locationId: 3,\r\n            country: \"Taiwan\",\r\n            city: \"Taipei\",\r\n            street: \"BackStreet\",\r\n            building: \"\"\r\n        }\r\n    ]\r\n    const initialTypes = [{\r\n        typeId: 0,\r\n        typeName: \"emergency\"\r\n    },\r\n    {\r\n        typeId: 1,\r\n        typeName: \"school\"\r\n    },\r\n    {\r\n        typeId: 2,\r\n        typeName: \"work\"\r\n    },\r\n    {\r\n        typeId: 3,\r\n        typeName: \"food\"\r\n    }]\r\n    const [viewMode, setViewMode] = useState(\"normal\");\r\n    const [datas, setDatas] = useState([]);\r\n    const [chosenData, setChosenData] = useState({});\r\n    const [locations, setLocations] = useState([]);\r\n    const [types, setTypes] = useState([]);\r\n    const [locationMax, setLocationMax] = useState(-1);\r\n    const [keywordDatas, setKeywordDatas] = useState([]);\r\n\r\n    const convertKeyName = (json) => {\r\n        json.forEach(data => {\r\n            for (let oldKey in data) {\r\n                let temp;\r\n                temp = oldKey.split(\"_\");\r\n                let newKey = temp[0].toLocaleLowerCase();\r\n                temp.forEach((word, index) => {\r\n                    if (index > 0) {\r\n                        word = word[0].toUpperCase() + word.slice(1);\r\n                        newKey += word;\r\n                    }\r\n                });\r\n                data[newKey] = data[oldKey];\r\n            }\r\n        })\r\n    }\r\n\r\n    const fetchDatas = async () => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/view\");\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            fetchLocations();\r\n            fetchTypes();\r\n            convertKeyName(json.data);\r\n            setDatas(json.data);\r\n            setViewMode(\"normal\");\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"err in fetching datas\", err);\r\n        }\r\n    }\r\n\r\n    const fetchRevise = async (dataObj) => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/revise_data\", {\r\n                method: \"put\",\r\n                headers: { 'content-type': 'application/json' },\r\n                body: JSON.stringify(dataObj)\r\n            });\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            console.log(\"fetchRevise=\", json);\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchRevise\", err);\r\n        }\r\n    }\r\n\r\n    const fetchNew = async (dataObj) => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/new_data\", {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(dataObj)\r\n            });\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            fetchDatas();\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchNew\", err);\r\n        }\r\n    }\r\n\r\n    const fetchLocations = async () => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/location\");\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            convertKeyName(json.data);\r\n            setLocations(json.data);\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchLocations\", err);\r\n        }\r\n    }\r\n\r\n    const fetchTypes = async () => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/type\");\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            convertKeyName(json.data);\r\n            setTypes(json.data);\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchTypes\", err);\r\n        }\r\n    }\r\n\r\n    const fetchCopy = async (dataObj) => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/copy_data\", {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(dataObj)\r\n            });\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            fetchDatas();\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchCopy\", err);\r\n        }\r\n    }\r\n\r\n    const fetchNewType = async (type) => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/new_type\", {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ Type_id: type })\r\n            });\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            fetchDatas();\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchNewType\", err);\r\n        }\r\n    }\r\n\r\n    const fetchDeleteData = async (dataObj) => {\r\n        try {\r\n            const data = await fetch(\"http://localhost:5000/delete_data\", {\r\n                method: 'delete',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(dataObj)\r\n            });\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            fetchDatas();\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchCopy\", err);\r\n        }\r\n    }\r\n\r\n    const fetchDeleteType = async (deleteTypeId) => {\r\n        try {\r\n            const data = await fetch(`http://localhost:5000/delete_type/${deleteTypeId}`, {\r\n                method: 'delete',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            const json = await data.json();\r\n            if ((json.errno || !json.status.includes(\"record\") && !json.status.includes(\"success\"))) {\r\n                throw json;\r\n            }\r\n            fetchDatas();\r\n            return \"success\";\r\n        }\r\n        catch (err) {\r\n            console.log(\"error in fetchDeleteType\", err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDatas();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setChosenData({});\r\n    }, [datas])\r\n\r\n    useEffect(() => {\r\n        let max = -1;\r\n        locations.forEach((location) => max = location.locationId > max ? location.locationId : max);\r\n        if (max >= 0) {\r\n            setLocationMax(max);\r\n        }\r\n    }, [locations])\r\n\r\n    return (\r\n        <div>\r\n            <EditButtons datas={datas} chosenData={chosenData} types={types} setViewMode={setViewMode} setKeywordDatas={setKeywordDatas} fetchCopy={fetchCopy} setLocationMax={setLocationMax} locations={locations} fetchNewType={fetchNewType} fetchDeleteData={fetchDeleteData} fetchDeleteType={fetchDeleteType} />\r\n            <EditTable datas={datas} setDatas={setDatas} chosenData={chosenData} setChosenData={setChosenData} locations={locations} setLocations={setLocations} types={types} setTypes={setTypes} locationMax={locationMax} setLocationMax={setLocationMax} viewMode={viewMode} keywordDatas={keywordDatas} fetchRevise={fetchRevise} fetchNew={fetchNew} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditPageContainer;","C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\ViewButtons.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\ViewTable.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\EditTable.js",[],[],"C:\\Users\\user\\Desktop\\projects\\Emotion_Diary\\front-end\\src\\components\\EditButtons.js",[],[],{"ruleId":"93","severity":1,"message":"94","line":11,"column":11,"nodeType":"95","messageId":"96","endLine":11,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":105,"column":8,"nodeType":"99","endLine":105,"endColumn":10,"suggestions":"100"},{"ruleId":"93","severity":1,"message":"94","line":6,"column":11,"nodeType":"95","messageId":"96","endLine":6,"endColumn":23},{"ruleId":"93","severity":1,"message":"101","line":64,"column":11,"nodeType":"95","messageId":"96","endLine":64,"endColumn":27},{"ruleId":"93","severity":1,"message":"102","line":94,"column":11,"nodeType":"95","messageId":"96","endLine":94,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":139,"column":29,"nodeType":"105","messageId":"106","endLine":139,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":139,"column":64,"nodeType":"105","messageId":"106","endLine":139,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":162,"column":29,"nodeType":"105","messageId":"106","endLine":162,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":162,"column":64,"nodeType":"105","messageId":"106","endLine":162,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":181,"column":29,"nodeType":"105","messageId":"106","endLine":181,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":181,"column":64,"nodeType":"105","messageId":"106","endLine":181,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":196,"column":29,"nodeType":"105","messageId":"106","endLine":196,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":196,"column":64,"nodeType":"105","messageId":"106","endLine":196,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":212,"column":29,"nodeType":"105","messageId":"106","endLine":212,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":212,"column":64,"nodeType":"105","messageId":"106","endLine":212,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":232,"column":29,"nodeType":"105","messageId":"106","endLine":232,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":232,"column":64,"nodeType":"105","messageId":"106","endLine":232,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":251,"column":29,"nodeType":"105","messageId":"106","endLine":251,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":251,"column":64,"nodeType":"105","messageId":"106","endLine":251,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":270,"column":29,"nodeType":"105","messageId":"106","endLine":270,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":270,"column":64,"nodeType":"105","messageId":"106","endLine":270,"endColumn":66},{"ruleId":"103","severity":1,"message":"104","line":288,"column":29,"nodeType":"105","messageId":"106","endLine":288,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":288,"column":64,"nodeType":"105","messageId":"106","endLine":288,"endColumn":66},{"ruleId":"97","severity":1,"message":"98","line":301,"column":8,"nodeType":"99","endLine":301,"endColumn":10,"suggestions":"107"},"no-unused-vars","'initialDatas' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchDatas'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'initialLocations' is assigned a value but never used.","'initialTypes' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator",["109"],{"desc":"110","fix":"111"},{"desc":"110","fix":"112"},"Update the dependencies array to be: [fetchDatas]",{"range":"113","text":"114"},{"range":"115","text":"114"},[3242,3244],"[fetchDatas]",[9374,9376]]